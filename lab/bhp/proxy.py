#!                                          /usr/bin/env python3
################################################################
################################################################
################################################################
################################################################
################################################################
################################################################
################################################################
from bhp import sk, hexdump
################################################################
################################################################
import sys
import argparse
from threading import Thread
################################################################
################################################################
################################################################
################################################################
#                                                      TELE:PORT
################################################################
################################################################
################################################################
################################################################
def getargs( argv ):
    argp = argparse.ArgumentParser( description="some program" )
    argp.add_argument( '-l', "--lochost", action="store", ######
                       default="localhost" ) ###################
    argp.add_argument( '-p', "--locport", action="store", ######
                       default="5942" ) ########################
    argp.add_argument( '-r', "--recvfst", action="store_true", #
                       default=False )
    argp.add_argument( 'rmhost' )
    argp.add_argument( 'rmport' )
    return argp.parse_args( argv )
######################################################          
HOST = 0                                          ####
PORT = 1                                          ####
######################################################          
################################################################
################################################################
#####       ##### あそこに銀行があります。
#####       #####
#####       #####
################################################################
################################################################
################################################################
class Proxy:                                      ##############
    ''' メアリさんはかばんも買いました。
    '''
    def __init__( self, local, remote, flag ):
        self.local = local
        self.remote = remote
        self.flag = flag
################################################################
##### あ そ こ 病 院 が あ り ま す 。
################################################################
################################################################
################################################################
################################################################
    def up( self ):
        sock = sk.tcpsocket()
        sk.bind( sock, self.local )
        sk.listen( sock )
        print( f"Proxy listening on port {self.local[PORT]}.." )
        self.loop( sock )
        print( "\nTurning off the server _" )
        sk.close( sock )
################################################################
################################################################
################################################################
################################################################
    def loop( self, sock ):
        while True:
            try:
                client = sk.accept( sock )
                td = Thread( target= self.handleclient,
                             args= ( client, ))
                td.start()
            except KeyboardInterrupt: break
################################################################
################################################################
    def handleclient( self, client ):
        server = sk.connect( self.remote )
        if self.flag:
            bufr = sk.recv( server )
            sk.send( client, bufr )
        while True:
            bufr = sk.recv( client )
            if not bufr: break #
            sk.send( server, bufr )
            bufr = sk.recv( server )
            sk.send( client, bufr )
        print( "Client has closed the connection" )
        sk.close( client )
        sk.close( server )
################################################################
################################################################
################################################################
################################################################
################################################################
################################################################
################################################################
################################################################
################################################################
################################################################
################################################################
def main( argv ):
    args = getargs( argv )
    local = ( args.lochost, int( args.locport ))
    remote = ( args.rmhost, int( args.rmport ))
    flag = args.recvfst
    Proxy( local, remote, flag ).up()
################################################################
################################################################
################################################################
################################################################
################################################################
################################################################
################################################################
################################################################
################################################################
################################################################
if __name__ == '__main__': main( sys.argv[ 1: ])
################################################################
################################################################
################################################################
################################################################
################################################################
################################################################
################################################################
################################################################
                                                            ####
    ####    ####    ####    ####    ####    ####    ####    ####
    ####    ####    ####    ####    ####    ####    ####    ####
    ####    ####    ####    ####    ####    ####    ####    ####
    ####    ####    ####    ####    ####    ####    ####    ####
    ####    ####    ####    ####    ####    ####    ####    ####
