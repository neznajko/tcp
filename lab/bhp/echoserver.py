#!                                          /usr/bin/env python3
################################################################
################################################################
################################################################
################################################################
################################################################
################################################################
import sys
################################################################
################################################################
DEFAULTPORT = 3813
###############################################################=
def getport( argv ):
    try: return int( argv[ 1 ])
    except: return DEFAULTPORT    
################################################################
################################################################
import socket
################################################################
SOCKS = 3
################################################################
################################################################
################################################################
################################################################
def gerout( e ):
    print( e )
    sys.exit( SOCKS )    
################################################################
################################################################
def tcpsocket(): return socket.socket()
################################################################
################################################################
################################################################
################################################################
def tscheck( f ):
    def g( *args ):
        try: return f( *args )
        except Exception as e: gerout( e )
    return g
################################################################
################################################################
################################################################
################################################################
@tscheck
def bind( sock, addr ): sock.bind( addr )
################################################################
################################################################
BACKLOG = 8
################################################################
################################################################
################################################################
@tscheck
def listen( sock, backlog=BACKLOG ):
    """ Princess Mononoke
    """
    '''
    '''
    sock.listen( backlog )
################################################################
################################################################
################################################################
SOCK = 0
ADDR = 1
################################################################
################################################################
################################################################
@tscheck
def accept( sock ):
    client = sock.accept()
    print( f"New client: {client[ ADDR ]}" )
    return client[ SOCK ]
################################################################
################################################################
################################################################
################################################################
BUFRSIZ = 4096
@tscheck
def recv( sock ):
    return sock.recv( BUFRSIZ )
################################################################
################################################################
################################################################
################################################################
@tscheck
def send( sock, msg ):
    if type( msg ) != bytes: msg = msg.encode()
    sock.send( msg )
################################################################
################################################################
################################################################
################################################################
from bhp import hexdump
################################################################
################################################################
################################################################
################################################################
PROMPT = "> "
def handlerequest( sock ):
    """
    """
    '''
    '''
    while True:
        send( sock, PROMPT )
        data = recv( sock ).rstrip() # remov trailing new line
        if not data: break
        data = hexdump( data, show=False )
        send( sock, '\n'.join( data ) + '\n' )
    print( "Client has closed the connection" )
    sock.close()
################################################################
from threading import Thread
################################################################
################################################################
################################################################
################################################################
################################################################
##############################################################//
def serverup( port ):
    sock = tcpsocket()
    addr = 'localhost', port
    bind( sock, addr )
    listen( sock )
    print( f"echo server listening on port {port} .." )
    while True:
        try:
            client = accept( sock )
            td = Thread( target=handlerequest, args=( client, ))
            td.start()
        except KeyboardInterrupt: break
    sock.close()
################################################################
################################################################
################################################################
################################################################
if __name__ == '__main__': serverup( getport( sys.argv ))
################################################################
################################################################
################################################################
################################################################
################################################################
# Usage: ./echoserver.py [PORT(3813)]
#        nc localhost PORT
################################################################
# In [60]: system( './echoserver.py' )
# echo server listening on port 3813 ..
# New client: ('127.0.0.1', 50234)
# Client has closed the connection
################################################################________
# $ nc localhost 3813                                           ________
# > check thus                                                  ________
# 0000 63 68 65 63 6b 20 74 68 75 73                    check thus______
# > thus is very stupid in my opinion!                          ________
# 0000 74 68 75 73 20 69 73 20 76 65 72 79 20 73 74 75  thus is very stu
# 0010 70 69 64 20 69 6e 20 6d 79 20 6f 70 69 6e 69 6f  pid in my opinio
# 0020 6e 21                                            n!      ________
# >                                                             ________
################################################################________
